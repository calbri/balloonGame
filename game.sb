' Graphics Window initialisation
GraphicsWindow.BackgroundColor = "White"
width = GraphicsWindow.Width
height = GraphicsWindow.Height

' Balloon variables - single ellipse
balloonX = 0
balloonY = 0
balloonDiameter = 20
balloon = Shapes.AddEllipse(balloonDiameter, balloonDiameter)
balloonSpeed = 1
' -1 if up, 1 if down
balloonDirection = 1

' Cannon variables
cannonBodyWidth = 50
cannonBodyHeight = 30
cannonBarrelWidth = 15
cannonBarrelHeight = 10

cannonX = GraphicsWindow.Width - cannonBodyWidth
cannonY = GraphicsWindow.Height - cannonBodyHeight
barrelX = cannonX - cannonBarrelWidth
barrelY = cannonY + ((cannonBarrelHeight + cannonBodyHeight) / 4)

body = Shapes.AddRectangle(cannonBodyWidth, cannonBodyHeight)
barrel = Shapes.AddRectangle(cannonBarrelWidth, cannonBarrelHeight)

cannonDirection = 0
cannonSpeed = 1

Shapes.Move(body, cannonX, cannonY)
Shapes.Move(barrel, barrelX, barrelY)

'  Bullet variables
bulletSize = 10
bullet = Shapes.AddRectangle(bulletSize, bulletSize)
bulletX = -bulletSize
bulletY = -bulletSize
Shapes.Move(bullet, bulletX, bulletY)
bulletSpeed = 0

' Set onKeyPress events
GraphicsWindow.KeyDown = keyDown
GraphicsWindow.KeyUp = keyUp

' 1 if the cannon can release a shot, 0 otherwise
canShoot = 1

' Counter for the number of missed shots
missedShots = 0

' Main game loop
RunLoop:
  ' Update height in case window scales
  height = GraphicsWindow.Height
  
  ' Update balloon position
  balloonY = balloonY + balloonSpeed*balloonDirection
  
  ' Check for out of bounds
  If (balloonY + balloonDiameter >= height or balloonY <= 0) Then
    balloonDirection = -balloonDirection
    balloonY = balloonY + balloonSpeed*balloonDirection
  EndIf
  
  ' Update cannon position
  cannonY = cannonY + cannonSpeed*cannonDirection
  
  ' Check for out of bounds
  If (cannonY + cannonBodyHeight >= height or cannonY <= 0) Then
    cannonY = cannonY - cannonSpeed*cannonDirection
  EndIf
  
  ' Update barrel position relative to cannon body
  barrelY = cannonY + ((cannonBarrelHeight + cannonBodyHeight) / 4)
  
  ' Update bullet position
  bulletX = bulletX - bulletSpeed
  
  ' Check for out of bounds
  If(bulletX <= -bulletSize) Then
    ' If out of bounds and shot in progress, mark as a missed shot
    If canShoot = 0 Then
      missedShots = missedShots + 1
    EndIf
    ' Set shoot variable to true and halt bullet movement
    canShoot = 1
    bulletSpeed = 0
  EndIf
  
  ' Have a 1/30 chance of the balloon changing directions
  If Math.GetRandomNumber(30) = 30 Then
    balloonDirection = balloonDirection * -1
  EndIf

  ' Update shapes to new positions calculated
  Shapes.Move(balloon, balloonX, balloonY)
  Shapes.Move(body, cannonX, cannonY)
  Shapes.Move(barrel, barrelX, barrelY)
  Shapes.Move(bullet, bulletX, bulletY)
  
  ' Wait for a bit
  Program.Delay(5)  
  
  ' If collision has occurred, stop the game, otherwise repeat the loop
  If (bulletX <= balloonX + balloonDiameter) and (bulletX + bulletSize >= balloonX) and (bulletY <= balloonY + balloonDiameter) and (bulletY + bulletSize >= balloonY) Then
    GraphicsWindow.ShowMessage("Missed shots = " + missedShots, "You Win!")
  Else
    Goto RunLoop
  EndIf
  
' Event if key is pressed
Sub keyDown
  If GraphicsWindow.LastKey = "Up" Then
    cannonDirection = -1
  ElseIf GraphicsWindow.LastKey = "Down" Then
    cannonDirection = 1
  ElseIf GraphicsWindow.LastKey = "Space" Then
    shoot()
  EndIf
EndSub

' Event when key is released
Sub keyUp
  If GraphicsWindow.LastKey = "Up" Then
    cannonDirection = 0
  ElseIf GraphicsWindow.LastKey = "Down" Then
    cannonDirection = 0
  EndIf
EndSub

' What to do if the cannon shoots
Sub shoot
  If canShoot = 1 Then
    canShoot = 0
    ' Move to position of cannon barrel
    bulletX = barrelX
    bulletY = barrelY
    Shapes.Move(bullet, bulletX, bulletY)
    ' Speed is 1.5x balloon speed
    bulletSpeed = balloonSpeed * 1.5
  EndIf
EndSub
    